digraph G {subgraph cluster_Data_Map_Enumerable_NonOrdered {
   style=filled;
   color=lightgrey;
   label="Data_Map_Enumerable_NonOrdered";
      node [shape=none, margin=0, fontsize=8] Data_Map_Enumerable_NonOrdered -> Data_Set_Computable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Map_Enumerable_NonOrdered -> FStar_String[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Map_Enumerable_NonOrdered -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Map_Enumerable_NonOrdered -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Map_Enumerable_NonOrdered -> DefaultValue[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Map_Enumerable_NonOrdered -> FStar_List_Tot_Base[color="#00000011",penwidth=0.5];
}


subgraph cluster_Data_Serialize {
   style=filled;
   color=lightgrey;
   label="Data_Serialize";
      node [shape=none, margin=0, fontsize=8] Data_Serialize_Decode -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Decode -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Decode -> Data_Serialize_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Decode -> Data_Serialize_Helpers_Serialized[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Decode -> Data_Serialize_Types[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Decode -> Data_Serialize_Rep[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Encode -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Encode -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Encode -> FStar_List_Pure[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Encode -> Data_Serialize_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Encode -> Data_Serialize_Helpers_Serialized[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Encode -> Data_Serialize_Types[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Encode -> Data_Serialize_Rep[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize -> Data_Serialize_Types[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize -> Data_Serialize_Encode[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize -> Data_Serialize_Decode[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize -> Data_Serialize_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize -> Data_Serialize_Helpers_Serialized[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize -> Data_Serialize_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize -> Data_Serialize_Rep[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Helpers -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Helpers -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Helpers -> Data_Serialize_Types[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Helpers_Serialized -> Data_Serialize_Types[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Helpers_Serialized -> Data_Serialize_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Helpers_Serialized -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Helpers_Serialized -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Helpers_Test -> Data_Serialize_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Helpers_Test -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Rep -> Data_Serialize_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Rep -> Data_Serialize_Helpers_Serialized[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Rep -> Data_Serialize_Types[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Rep -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Rep -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_MakeNative -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_MakeNative -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_MakeNative -> Data_Serialize_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_MakeNative -> Data_Serialize_Helpers_Serialized[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_MakeNative -> Data_Serialize_Types[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_MakeNative -> Data_Serialize_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_MakeNative -> Data_Serialize_Rep[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Typeclasses -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Typeclasses -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Typeclasses -> Data_Serialize_Types[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Typeclasses -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Typeclasses -> Data_Serialize_Encode[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Typeclasses -> Data_Serialize_Decode[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Typeclasses -> Data_Serialize_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Typeclasses -> Data_Serialize_Helpers_Serialized[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Typeclasses -> Data_Serialize_Rep[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Types -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Serialize_Types -> FStar_List_Tot[color="#00000011",penwidth=0.5];
}


subgraph cluster_Data_Set_Computable_NonOrdered {
   style=filled;
   color=lightgrey;
   label="Data_Set_Computable_NonOrdered";
      node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered -> FStar_GSet[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered -> FStar_Tactics_PatternMatching[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered -> FStar_Tactics_Logic[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered_PartialOrder -> Data_Set_Computable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered_PartialOrder -> Data_Set_Computable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered_PartialOrder -> PartialOrder[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered_PartialOrder -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Data_Set_Computable_NonOrdered_PartialOrder -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
}


subgraph cluster_DefaultValue {
   style=filled;
   color=lightgrey;
   label="DefaultValue";
      node [shape=none, margin=0, fontsize=8] DefaultValue -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
}


subgraph cluster_PartialOrder {
   style=filled;
   color=lightgrey;
   label="PartialOrder";
      node [shape=none, margin=0, fontsize=8] PartialOrder -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
}


subgraph cluster_StarCombinator {
   style=filled;
   color=lightgrey;
   label="StarCombinator";
      node [shape=none, margin=0, fontsize=8] MyIO -> FStar_All[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Base -> StarCombinator_Core[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Base -> StarCombinator_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Base -> StarCombinator_Operators[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Base -> FStar_String[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Base -> FStar_Char[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Base -> StarCombinator_Constants[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Base -> FStar_List_Tot_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Base -> FStar_Mul[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Constants -> FStar_String[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Core -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Core -> FStar_String[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Core -> StarCombinator_Helpers[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Core -> MyIO[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Examples -> StarCombinator[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Examples -> MyIO[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Examples -> FStar_Mul[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Examples -> StarCombinator_Examples_While[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Examples_While -> StarCombinator[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator_Examples_While -> FStar_List_Tot_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator -> FStar_String[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator -> FStar_Char[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator -> FStar_Mul[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator -> FStar_List_Tot_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StarCombinator -> FStar_Tactics[color="#00000011",penwidth=0.5];

   node [shape=none, margin=0, fontsize=8] StarCombinator_Operators -> StarCombinator_Core[color="#00000011",penwidth=0.5];
}


subgraph cluster_ToString {
   style=filled;
   color=lightgrey;
   label="ToString";
      node [shape=none, margin=0, fontsize=8] ToString -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToString -> FStar_String[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToString -> FStar_List_Tot_Base[color="#00000011",penwidth=0.5];
}


subgraph cluster_ToyStaticAnalyser {
   style=filled;
   color=lightgrey;
   label="ToyStaticAnalyser";
      node [shape=none, margin=0, fontsize=8] AbstractDomain -> PartialOrder[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractDomain -> DefaultValue[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractDomain -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractDomain -> ZeroOrLess[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] CartProdAbs -> AbstractDomain[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] CartProdAbs -> PartialOrder[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] CartProdAbs -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] CartProdAbs -> DefaultValue[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] CartProdAbs -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] CartProdAbs -> ZeroOrLess[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] CartProdAbs -> GaloisConnection[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] CartProdAbs -> FStar_GSet[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] CartProdAbs -> Data_Set_Computable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> ExtInt[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> PartialOrder[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> AbstractDomain[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> GaloisConnection[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> DefaultValue[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> ZeroOrLess[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> FStar_GSet[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> Data_Set_Computable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Congruence -> FStar_Mul[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ExtInt -> FStar_Mul[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ExtInt -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] GaloisConnection -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] GaloisConnection -> PartialOrder[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] GaloisConnection -> Data_Set_Computable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] GaloisConnection -> FStar_GSet[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] GaloisConnection -> Data_Set_Computable_NonOrdered_PartialOrder[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> ExtInt[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> PartialOrder[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> AbstractDomain[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> GaloisConnection[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> DefaultValue[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> ZeroOrLess[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> FStar_GSet[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Interval -> Data_Set_Computable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_FunctionalExtensionality[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_GSet[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> Data_Set_Computable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> Interval[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> ExtInt[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_Mul[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> PartialOrder[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> GaloisConnection[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> DefaultValue[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> ToyLanguageDef[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> ToyLanguageInterpreter[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> Data_Map_Enumerable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> AbstractDomain[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> ZeroOrLess[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> StaticAnalyser[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> Congruence[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> Interval[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> CartProdAbs[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> ToyParser[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_OrdSet[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> MyIO[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_String[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_Char[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_UInt32[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> ToyParser[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Main -> FStar_All[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Monad -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Monad -> Functor[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] MyIO -> FStar_All[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> FStar_GSet[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> Data_Set_Computable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> GaloisConnection[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> ToyLanguageDef[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> Data_Map_Enumerable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> AbstractDomain[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> ZeroOrLess[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> PartialOrder[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> ToyParser[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] StaticAnalyser -> MyIO[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] TestMetaStar -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] TestMetaStar -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyLanguageDef -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyLanguageDef -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyLanguageDef -> Data_Map_Enumerable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyLanguageDef -> FStar_List_Tot_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyLanguageInterpreter -> ToyLanguageDef[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyLanguageInterpreter -> DefaultValue[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyLanguageInterpreter -> FStar_Mul[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyLanguageInterpreter -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyParser -> FStar_String[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyParser -> FStar_Char[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyParser -> FStar_List_Tot_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyParser -> ToyLanguageDef[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyParser -> StarCombinator[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ToyParser -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] ZeroOrLess -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
}


subgraph cluster_VEffect {
   style=filled;
   color=lightgrey;
   label="VEffect";
      node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Interface -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> AbstractInterpreter_Interface[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> StaticAnalyser[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> While[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> While_Convert[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> While_Native[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> Interval[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> Congruence[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> Data_Map_Enumerable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> FStar_List_Tot[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> GaloisConnection[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> CartProdAbs[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> Data_Serialize[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> Data_Serialize_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> DefaultValue[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> ExtInt[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] AbstractInterpreter_Toy -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Effects_Base -> FStar_FunctionalExtensionality[color="#00000011",penwidth=0.5];

   node [shape=none, margin=0, fontsize=8] Effects_Pullers_Definitions -> Effects_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Effects_Pullers_Definitions -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Effects_Pullers_Definitions -> FStar_Calc[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Effects_Pullers_Definitions -> FStar_FunctionalExtensionality[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Effects_Pullers_Lemmas -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Effects_Pullers_Lemmas -> Effects_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Effects_Pullers_Lemmas -> Effects_Pullers_Definitions[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] Effects_Pullers_Lemmas -> FStar_FunctionalExtensionality[color="#00000011",penwidth=0.5];

   node [shape=none, margin=0, fontsize=8] VEffect -> Effects[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VEffect -> AbstractInterpreter_Interface[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VEffect -> While[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VEffect -> While_WP[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VEffect -> FStar_FunctionalExtensionality[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VEffect -> FStar_Tactics[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VEffect -> While_WP[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Effect -> While[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Effect -> While_WP[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Effect -> Effects[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Effect -> FStar_FunctionalExtensionality[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Effect -> Effects_Pullers_Definitions[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_WP -> While[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_WP -> Effects[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_WP -> FStar_FunctionalExtensionality[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_WP -> Effects_Pullers_Definitions[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> While[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> While_Convert[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> StaticAnalyser[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> While_Native[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> FStar_Tactics [color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> VEffect[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> Effects_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> While_WP[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> While_Effect[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> AbstractInterpreter_Interface[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> AbstractInterpreter_Toy[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> Data_Map_Enumerable_NonOrdered[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> GaloisConnection[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> Data_Serialize[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] VWhile -> FStar_Tactics[color="#00000011",penwidth=0.5];
}


subgraph cluster_WhileToyLang {
   style=filled;
   color=lightgrey;
   label="WhileToyLang";
      node [shape=none, margin=0, fontsize=8] While -> FStar_Tactics_Typeclasses[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While -> FStar_List_Tot_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Parser -> FStar_String[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Parser -> FStar_Char[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Parser -> FStar_List_Tot_Base[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Parser -> While[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Parser -> ToString[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Parser -> StarCombinator[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Convert -> While[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Convert -> ToyLanguageDef[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Convert -> StaticAnalyser[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Native -> While[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Native -> While_Parser[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Native -> While_Convert[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Native -> Data_Serialize[color="#00000011",penwidth=0.5];
   node [shape=none, margin=0, fontsize=8] While_Native -> FStar_Tactics[color="#00000011",penwidth=0.5];
}
ratio=0.5;
}
